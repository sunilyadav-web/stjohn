# Generated by Django 3.2.10 on 2022-07-01 11:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdmitCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_no', models.CharField(max_length=40, unique=True)),
                ('image', models.ImageField(blank=True, upload_to='admitcard')),
                ('title', models.CharField(max_length=200)),
                ('date', models.CharField(max_length=200)),
                ('time', models.CharField(max_length=200)),
                ('reg_no', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('paper', models.CharField(max_length=200)),
                ('exam_centre', models.CharField(max_length=200)),
                ('instruction', models.TextField(default="Instructions to the Candidate\n1. This Admit Card must be presented for verification at the time of examination, along with at least one original (not photocopied or scanned copy) and valid (not expired) photo identification card (eg: College ID, Employer ID. Driving License, Passport, PAN card, Voter ID, Aadhaar-UID, etc).\n2. This Admit Card is valid only if the candidate's photograph and signature images are legibly printed. Print this on an A4 sized paper using a laser printer, preferably a colour photo printer.\n3. Candidates should occupy their allotted seats 25 minutes before the scheduled start of the examination.\n4. Candidates will not be allowed to enter examination hall 30 minutes after the commencement of the  examination.\n5. Candidates will not be allowed to leave the examination hall before the end of the examination\n6. Bring two (2) black ink ballpoint pens. Candidates have to answer in the Optical Response Sheet (ORS) by darkening the bubbles using only a black ink ballpoint pen. Since bubbles darkened by the black ink ballpoint pen cannot be erased, candidates should darken the bubbles in the ORS very carefully.\n7. Name of the candidate. Registration number. Examination centre and Signature of the candidate should be entered in the ORS using only a black ink ballpoint pen.\n8. Calculator is allowed in the examination hall. However, shanng of calculators is NOT ALLOWED. D not bring any Charts/Tables/Loose sheets to the examination hall\n9. Mobile phones or any other Electronic gadgets are NOT ALLOWED inside the examination hall. There may not be any facility for safe keeping of your gadget outside the hall, sot me be easier to leave it at your residence')\n")),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Apply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=100)),
                ('applying_for', models.CharField(choices=[('Health Science Courses', 'Health Science Courses'), ('Engineering Courses', 'Engineering Courses'), ('Management Courses', 'Management Courses'), ('Certified Courses', 'Certified Courses'), ('Other Courses', 'Other Courses')], max_length=50)),
                ('query', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('contact_no', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('contacted_on', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Contact',
                'ordering': ['-contacted_on'],
            },
        ),
        migrations.CreateModel(
            name='Course_desc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=100)),
                ('pre_requisite', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('fee', models.CharField(max_length=100)),
                ('breif_desc', models.CharField(max_length=100)),
                ('branch', models.CharField(choices=[('Health Science Courses', 'Health Science Courses'), ('Engineering Courses', 'Engineering Courses'), ('Management Courses', 'Management Courses'), ('Certified Courses', 'Certified Courses')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='IdCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_no', models.CharField(max_length=40, unique=True)),
                ('image', models.ImageField(blank=True, upload_to='idcard')),
                ('name', models.CharField(max_length=100)),
                ('fathers_name', models.CharField(max_length=100)),
                ('dob', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('issuing_year', models.CharField(max_length=100)),
                ('validity_year', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_no', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('father_name', models.CharField(max_length=50)),
                ('course', models.CharField(max_length=50)),
                ('specialization', models.CharField(max_length=50)),
                ('academic_year', models.CharField(max_length=50)),
                ('year_of_passing', models.IntegerField()),
                ('profile_pic', models.ImageField(blank=True, upload_to='uploads/student_images/')),
            ],
        ),
        migrations.CreateModel(
            name='QuesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=200, null=True)),
                ('op1', models.CharField(max_length=200, null=True)),
                ('op2', models.CharField(max_length=200, null=True)),
                ('op3', models.CharField(max_length=200, null=True)),
                ('op4', models.CharField(max_length=200, null=True)),
                ('ans', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('desc', models.TextField(blank=True, default='No desc provided')),
                ('thumbnail', models.ImageField(default='default_quiz.jpeg', upload_to='Quiz-Thumbnail', validators=[django.core.validators.validate_image_file_extension])),
            ],
            options={
                'verbose_name_plural': 'QuizPost',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('particular', models.CharField(max_length=100)),
                ('max_marks', models.IntegerField()),
                ('min_marks', models.IntegerField()),
                ('obtained', models.IntegerField()),
                ('remarks', models.CharField(choices=[('Pass', 'Pass'), ('Fail', 'Fail')], max_length=50)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.profile')),
            ],
        ),
        migrations.CreateModel(
            name='QuizResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(max_length=100)),
                ('time', models.CharField(max_length=100)),
                ('correct', models.CharField(max_length=100)),
                ('wrong', models.CharField(max_length=100)),
                ('percent', models.CharField(max_length=100)),
                ('total', models.CharField(max_length=100)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.quesmodel')),
                ('result_of', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='quesmodel',
            name='ques_post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.quizpost'),
        ),
    ]
